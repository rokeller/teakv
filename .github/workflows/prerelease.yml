name: PreRelease

on:
  push:
    branches: ["release/**"]

env:
  DOTNET_VERSIONS: |
    6.0.x
    7.0.x

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSIONS }}

      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |
          dotnet restore TeaSuite.KV.sln
          dotnet restore Examples.sln

      - name: Build
        run: |
          dotnet build TeaSuite.KV.sln --no-restore --configuration Release
          dotnet build Examples.sln --no-restore --configuration Release

      - name: Test
        run: |
          dotnet test TeaSuite.KV.sln --no-build --configuration Release  \
            --collect:'XPlat Code Coverage'                               \
            --results-directory 'TestResults/Temp'

      - name: Install report generator
        if: ${{ always() }}
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate report
        if: ${{ always() }}
        run: |
          reportgenerator -reports:"TestResults/Temp/*/coverage.cobertura.xml" \
            -targetdir:coverage '-reporttypes:Html_Dark;MarkdownSummaryGithub'

      - name: Write to Job Summary
        if: ${{ always() }}
        run: cat coverage/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

  publish:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSIONS }}

      - name: Create NuGet Package
        run: |
          SHORT_HASH=$(git rev-parse --short HEAD)
          dotnet pack TeaSuite.KV.sln --configuration Release -p:VersionSuffix=rc-$SHORT_HASH
          mkdir packages/ || true
          cp $(find ./ -name *.nupkg -print) packages/

      - name: Publish NuGet Package
        run: |
          dotnet nuget push packages/*.nupkg -k $NUGET_AUTH_TOKEN -s https://api.nuget.org/v3/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}
